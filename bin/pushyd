#!/usr/bin/env ruby

# Try to load external libs, helpers and constants
begin
  require "rubygems"
  require 'bmc-daemon-lib'
  require "optparse"
  require 'daemons'
rescue LoadError => e
  raise "EXITING: some basic libs were not found (#{e.message})"
end
include BmcDaemonLib


# Handle configuration
begin
  # Defaults
  cmd_config = nil
  cmd_logfile = nil
  cmd_dump = nil
  cmd_daemonize = nil
  headers = []

  # Init Chamber-based configuration from Gemspec
  Conf.init File.dirname(__FILE__) + "/../"
  Conf.app_env = "production"

  # Parse options and check compliance
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename $PROGRAM_NAME} [options] run|start|stop"
    opts.on("-l", "--log LOGFILE")                                  { |path| cmd_logfile = File.expand_path(path.to_s)}
    opts.on("-c", "--config CONFIGFILE")                            { |path| cmd_config = File.expand_path(path.to_s)}
    opts.on("-e", "--environment ENV")                              { |env| Conf.app_env = env }
    opts.on("-d", "--daemonize", "Run daemonized in the background"){ cmd_daemonize = true }
    opts.on("-f", "--foreground", "Run in the foreground")          { cmd_daemonize = false }
    opts.on("-u", "--user USER")                                    { |user| ENV['USER'] = user }
    opts.on("-p", "--pass PASS")                                    { |pass| ENV['PASS'] = pass }
    opts.on("-h", "--headers a,b,c", Array, "Array of headers")     { |head|  headers = head }
    opts.on("",   "--dev")                                          { Conf.app_env = "development" }
    opts.on("",   "--dump", "Dump config as seen by the process")   { |value| cmd_dump = true }
  end
  parser.order!(ARGV)

  # Load Chamber-based configuration
  Conf.prepare config: cmd_config, logfile: cmd_logfile

  # Override log file
  Conf[:logs] ||= {}
  Conf[:logs][:file] = cmd_logfile.to_s if cmd_logfile

rescue OptionParser::InvalidOption => e
  abort "EXITING: InvalidOption: #{e.message}"
rescue ConfigParseError => e
  abort "EXITING: ConfigParseError: #{e.message}"
rescue StandardError => e
  abort "EXITING: StandardError: #{e.message} \n #{e.backtrace.to_yaml}"
else
end

#set headers array on env variable
ENV['HEADERS'] = headers.join('|')

# Display final configuration, quit if config dump requested
puts "--- #{Conf.app_name} #{Conf.app_ver}"
puts "Environment     \t #{Conf.app_env}"
puts "User            \t #{ENV['USER']}"
puts "Password        \t #{ENV['PASS']}"
puts "Headers         \t #{headers}"
puts "Config files    \t #{Conf.files}"
puts "Started at      \t #{Conf.app_started}"
puts "Daemonize       \t #{cmd_daemonize}"
puts "Loging to file  \t #{Conf[:log][:file]}" if Conf[:log].is_a? Enumerable
puts "Process name    \t #{Conf.generate_process_name}"
puts "Newrelic        \t #{Conf.feature_newrelic? || '-'}"
puts "Rollbar         \t #{Conf.feature_rollbar? || '-'}"
if cmd_dump
  puts
  puts Conf.dump
end

# Run daemon
run_options = {
  monitor: false,
  ontop: !cmd_daemonize,
  backtrace: true,
  multiple: false,
  dir_mode: :normal,
  dir: '/tmp/'
  }
Daemons.run_proc(Conf.generate_process_name, run_options) do
  # Load code
  Conf.prepare_newrelic

  # Load code
  Conf.log :launcher, "load project code"
  require_relative "../lib/pushyd"

  # Start daemon
  Conf.log :launcher, "start daemon"

  # Start the proxy
  PushyDaemon::Proxy.new

  # Backup infinite loop in case shout does nothing
  loop do
    sleep 1
  end
end
